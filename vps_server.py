#!/usr/bin/env python3
"""
–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è VPS —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
"""
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, StreamingResponse
from pydantic import BaseModel
import io
import time
import requests
import logging
import os
import asyncio
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class FeedItem(BaseModel):
    id: str
    channel: str
    message_id: int
    text: str
    views: int
    likes: int
    comments: int
    date: str
    media_url: str
    post_url: str

class PromptReq(BaseModel):
    feed_item_id: str

# –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã
WORKING_CHANNELS = {
    "fashion": ["rogov24", "burimovasasha", "zarina_brand"]
}

# Telegram –∫–ª–∏–µ–Ω—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
class TelegramClient:
    def __init__(self):
        self.api_id = os.getenv("TELEGRAM_API_ID")
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.session_string = os.getenv("TELEGRAM_SESSION")
        self.client = None
        self.connected = False
        self.connection_lock = asyncio.Lock()
        self.cache = {}  # –ö—ç—à –¥–ª—è –ø–æ—Å—Ç–æ–≤
        self.cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        async with self.connection_lock:
            if self.connected:
                return True
                
            if not all([self.api_id, self.api_hash, self.session_string]):
                logger.warning("‚ùå Telegram credentials not found - using demo mode")
                return False
                
            try:
                from telethon import TelegramClient as TGClient
                from telethon.sessions import StringSession
                
                logger.info("üîå Creating Telegram client...")
                self.client = TGClient(
                    StringSession(self.session_string),
                    int(self.api_id),
                    self.api_hash
                )
                
                logger.info("üîå Starting Telegram client...")
                await self.client.start()
                self.connected = True
                logger.info("‚úÖ Telegram client connected successfully!")
                return True
            except Exception as e:
                logger.error(f"‚ùå Failed to connect to Telegram: {e}")
                logger.error(f"‚ùå Error type: {type(e).__name__}")
                logger.error(f"‚ùå Error details: {str(e)}")
                self.connected = False
                return False
    
    async def get_channel_posts(self, channel_username: str, limit: int = 10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{channel_username}_{limit}"
        if cache_key in self.cache:
            cache_time, posts = self.cache[cache_key]
            if time.time() - cache_time < self.cache_timeout:
                logger.info(f"üì¶ Using cached posts for {channel_username}")
                return posts
        
        logger.info(f"üîç Fetching real posts from {channel_username}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        logger.info(f"üîå Attempting to connect to Telegram...")
        if not await self.connect():
            logger.warning(f"üì± Telegram not connected, using demo for {channel_username}")
            return self._get_demo_posts(channel_username, limit)
        
        try:
            logger.info(f"üîç Fetching real posts from {channel_username}")
            posts = []
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                entity = await self.client.get_entity(channel_username)
                logger.info(f"‚úÖ Found channel: {entity.title}")
            except Exception as e:
                logger.error(f"‚ùå Channel {channel_username} not found: {e}")
                return self._get_demo_posts(channel_username, limit)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            message_count = 0
            async for message in self.client.iter_messages(entity, limit=limit*5):
                if message.views and message.views >= 500:  # –ú–∏–Ω–∏–º—É–º 500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                    post_data = {
                        'id': f"{channel_username}_{message.id}",
                        'channel': channel_username,
                        'message_id': message.id,
                        'text': (message.text or "No text")[:200],
                        'views': message.views or 0,
                        'likes': getattr(message.reactions, 'count', 0) if message.reactions else 0,
                        'comments': message.replies.replies if message.replies else 0,
                        'date': message.date.isoformat(),
                        'media_url': f"/photo/{channel_username}/{message.id}" if message.photo else "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=600&fit=crop",
                        'post_url': f"https://t.me/{channel_username}/{message.id}"
                    }
                    posts.append(post_data)
                    message_count += 1
                    logger.info(f"üìÑ Found post {message.id} with {message.views} views")
                    
                    if message_count >= limit:
                        break
            
            logger.info(f"‚úÖ Retrieved {len(posts)} real posts from {channel_username}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[cache_key] = (time.time(), posts)
            logger.info(f"üì¶ Cached {len(posts)} posts for {channel_username}")
            
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå Error getting posts from {channel_username}: {e}")
            return self._get_demo_posts(channel_username, limit)
    
    def _get_demo_posts(self, channel_username: str, limit: int):
        """–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        demo_posts = []
        for i in range(limit):
            post_id = f"{channel_username}_demo_{i+1}"
            demo_posts.append({
                'id': post_id,
                'channel': channel_username,
                'message_id': i+1,
                'text': f"Demo post from {channel_username} #{i+1} - testing interface",
                'views': 15000 + i * 1000,
                'likes': 750 + i * 50,
                'comments': 150 + i * 10,
                'date': '2024-01-15T10:00:00Z',
                'media_url': f"https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=600&fit=crop",
                'post_url': f"https://t.me/{channel_username}/{i+1}"
            })
        return demo_posts

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Creative MVP - VPS Server", version="1.0.0")

# Telegram –∫–ª–∏–µ–Ω—Ç
telegram_client = TelegramClient()

@app.get("/")
async def root():
    return {"message": "Creative MVP - VPS Server", "status": "running"}

@app.get("/telegram/channels/{category}")
async def get_channel_posts(category: str, limit: int = 6):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if category not in WORKING_CHANNELS:
            raise HTTPException(404, f"Category {category} not found")
        
        all_posts = []
        for channel in WORKING_CHANNELS[category]:
            posts = await telegram_client.get_channel_posts(channel, limit)
            all_posts.extend(posts)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        all_posts.sort(key=lambda x: x['date'], reverse=True)
        
        return {
            "category": category,
            "posts": all_posts[:limit],
            "total": len(all_posts)
        }
    except Exception as e:
        logger.error(f"‚ùå Error getting posts: {e}")
        raise HTTPException(500, f"Error getting posts: {str(e)}")

@app.get("/photo/{channel}/{message_id}")
async def get_photo(channel: str, message_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ Telegram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        await telegram_client.connect()
        
        if not telegram_client.client:
            raise HTTPException(500, "Telegram client not connected")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
        entity = await telegram_client.client.get_entity(channel)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await telegram_client.client.get_messages(entity, ids=message_id)
        if not message or not message.photo:
            raise HTTPException(404, "Photo not found")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å
        photo_bytes = await telegram_client.client.download_media(message.photo, file=bytes)
        
        if not photo_bytes:
            raise HTTPException(404, "Photo download failed")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –ø–æ—Ç–æ–∫
        return StreamingResponse(
            io.BytesIO(photo_bytes),
            media_type="image/jpeg",
            headers={"Cache-Control": "public, max-age=3600"}
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error getting photo: {e}")
        raise HTTPException(500, f"Error getting photo: {str(e)}")

@app.post("/prompts/generate")
async def gen_prompts(req: PromptReq):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞"""
    logger.info(f"üé® Generating prompts for: {req.feed_item_id}")
    
    return {
        "prompts": [
            f"Create a stunning fashion image inspired by {req.feed_item_id}",
            f"Generate beautiful content based on {req.feed_item_id}",
            f"Design an elegant concept for {req.feed_item_id}"
        ],
        "seed": random.randint(1000, 9999),
        "provider": "telegram_real"
    }

@app.post("/creative/generate")
async def creative_generate(req: PromptReq):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    logger.info(f"üé® Generating image for: {req.feed_item_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FAL_KEY
    fal_key = os.getenv("FAL_KEY")
    logger.info(f"üîç FAL_KEY check: {fal_key is not None}")
    if fal_key:
        logger.info(f"üîë FAL_KEY found: {fal_key[:20]}...")
    else:
        logger.warning("‚ùå FAL_KEY not found, using demo image")
        return {
            "image_url": "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=600&fit=crop",
            "prompt": f"Generated image for {req.feed_item_id}",
            "seed": random.randint(1000, 9999),
            "provider": "demo"
        }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FAL API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        import fal_client
        
        logger.info(f"üîë FAL_KEY found: {fal_key[:20]}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FAL
        logger.info(f"üé® Submitting to FAL API...")
        result = fal_client.submit(
            "fal-ai/flux-pro",
            arguments={
                "prompt": f"Fashion image inspired by {req.feed_item_id}, high quality, professional photography",
                "image_size": "square_hd",
                "num_inference_steps": 28
            }
        )
        
        logger.info(f"‚è≥ Waiting for FAL API result...")
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = fal_client.wait(result)
        image_url = result["images"][0]["url"]
        prompt = f"Generated image for {req.feed_item_id}"
        
        logger.info(f"‚úÖ Generated image for {req.feed_item_id}: {image_url}")
        return {
            "image_url": image_url,
            "prompt": prompt,
            "seed": random.randint(1000, 9999),
            "provider": "fal_ai"
        }
        
    except Exception as e:
        logger.error(f"‚ùå FAL API error: {e}")
        # Fallback –Ω–∞ –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return {
            "image_url": "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=600&fit=crop",
            "prompt": f"Generated image for {req.feed_item_id}",
            "seed": random.randint(1000, 9999),
            "provider": "demo_fallback"
        }

@app.get("/ui", response_class=HTMLResponse)
def ui():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å UI"""
    return """<!doctype html>
<html>
<head>
    <title>Creative MVP - VPS Server</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; }
        .tabs { display: flex; justify-content: center; margin-bottom: 20px; }
        .tab { padding: 10px 20px; margin: 0 5px; background: #007bff; color: white; border: none; cursor: pointer; border-radius: 5px; }
        .tab.active { background: #0056b3; }
        .tab:hover { background: #0056b3; }
        .feed { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }
        .post { background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .post img { width: 100%; height: 300px; object-fit: cover; }
        .post-content { padding: 15px; }
        .post-stats { display: flex; justify-content: space-between; margin-top: 10px; color: #666; }
        .btn { background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #218838; }
        .btn-secondary { background: #6c757d; }
        .btn-secondary:hover { background: #5a6268; }
        .loading { text-align: center; padding: 20px; color: #666; }
        .status { background: #d4edda; color: #155724; padding: 10px; border-radius: 5px; margin-bottom: 20px; text-align: center; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Creative MVP - VPS Server</h1>
            <p>Real posts from Telegram channels with beautiful images</p>
        </div>
        
        <div class="status">
            ‚úÖ Connected to VPS Server - Loading real data
        </div>
        
        <div class="tabs">
            <button class="tab active" onclick="loadFeed('fashion')">Fashion</button>
        </div>
        
        <div id="feed" class="feed">
            <div class="loading">Loading real posts from Telegram...</div>
        </div>
    </div>

    <script>
        async function loadFeed(category) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            document.getElementById('feed').innerHTML = '<div class="loading">Loading real posts from Telegram...</div>';
            
            try {
                const response = await fetch(`/telegram/channels/${category}?limit=6`);
                const data = await response.json();
                
                if (data.posts) {
                    displayPosts(data.posts);
                } else {
                    document.getElementById('feed').innerHTML = '<div class="loading">No posts found</div>';
                }
            } catch (error) {
                console.error('Error loading feed:', error);
                document.getElementById('feed').innerHTML = '<div class="loading">Error loading posts</div>';
            }
        }
        
        function displayPosts(posts) {
            const feed = document.getElementById('feed');
            feed.innerHTML = posts.map(post => `
                <div class="post">
                    <img src="${post.media_url}" alt="Post image" onerror="this.src='https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=600&fit=crop'">
                    <div class="post-content">
                        <h3>${post.text}</h3>
                        <div class="post-stats">
                            <span>üëÅÔ∏è ${post.views.toLocaleString()}</span>
                            <span>‚ù§Ô∏è ${post.likes}</span>
                            <span>üí¨ ${post.comments}</span>
                        </div>
                        <button class="btn" onclick="generatePrompts('${post.id}')">–ü—Ä–æ–º–ø—Ç</button>
                        <button class="btn btn-secondary" onclick="generateImage('${post.id}')">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                </div>
            `).join('');
        }
        
        async function generatePrompts(feedItemId) {
            try {
                const response = await fetch('/prompts/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ feed_item_id: feedItemId })
                });
                const data = await response.json();
                alert('Generated prompts:\\n' + data.prompts.join('\\n'));
            } catch (error) {
                console.error('Error generating prompts:', error);
                alert('Error generating prompts');
            }
        }
        
        async function generateImage(feedItemId) {
            try {
                const response = await fetch('/creative/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ feed_item_id: feedItemId })
                });
                const data = await response.json();
                alert('Generated image: ' + data.image_url);
            } catch (error) {
                console.error('Error generating image:', error);
                alert('Error generating image');
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        loadFeed('fashion');
    </script>
</body>
</html>"""

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
