#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Telemetr API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
"""
import requests
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_telemetr_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Telemetr API"""
    
    # –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç Telemetr
    token = "2i92Ks59Z5ILIhG5BLDmRS0nWAXGacsSreHvRnKEnS5rHTe6qdcksAnjnGA4Eek6ZQvHNYLL9CBUI"
    
    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telemetr API
    base_url = "https://api.telemetr.me"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
        print("üîç Testing channels endpoint...")
        response = requests.get(f"{base_url}/channels", headers=headers)
        
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            channels = response.json()
            print(f"‚úÖ Channels retrieved successfully!")
            print(f"Response: {json.dumps(channels, indent=2, ensure_ascii=False)[:500]}...")
        else:
            print(f"‚ùå Channels failed: {response.text}")
        
        # –¢–µ—Å—Ç 2: –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        print(f"\nüîç Testing channel search...")
        
        test_channels = [
            "rogov24",
            "burimovasasha", 
            "zarina_brand",
            "goldapple_ru",
            "glamguruu"
        ]
        
        working_channels = []
        
        for channel in test_channels:
            try:
                print(f"\nüîç Searching for: {channel}")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª
                response = requests.get(f"{base_url}/channels", 
                                      headers=headers,
                                      params={"search": channel})
                
                print(f"   Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ SUCCESS!")
                    print(f"   Response: {json.dumps(data, indent=2, ensure_ascii=False)[:300]}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if 'data' in data and len(data['data']) > 0:
                        working_channels.append(channel)
                        print(f"   ‚úÖ Found {len(data['data'])} results for {channel}")
                    else:
                        print(f"   ‚ùå No results for {channel}")
                else:
                    print(f"   ‚ùå Failed: {response.text[:200]}...")
                    
            except Exception as e:
                print(f"   ‚ùå Error: {e}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
        if working_channels:
            print(f"\nüîç Testing channel publications...")
            test_channel = working_channels[0]
            
            try:
                response = requests.get(f"{base_url}/channels/{test_channel}/publications", 
                                      headers=headers)
                
                print(f"Status: {response.status_code}")
                if response.status_code == 200:
                    publications = response.json()
                    print(f"‚úÖ Publications retrieved for {test_channel}!")
                    print(f"Response: {json.dumps(publications, indent=2, ensure_ascii=False)[:500]}...")
                else:
                    print(f"‚ùå Publications failed: {response.text}")
                    
            except Exception as e:
                print(f"‚ùå Error getting publications: {e}")
        
        print(f"\nüìä SUMMARY:")
        print(f"‚úÖ Working channels: {len(working_channels)}")
        
        if working_channels:
            print(f"\nüéØ WORKING CHANNELS:")
            for ch in working_channels:
                print(f"  - {ch}")
        else:
            print(f"\n‚ùå No working channels found")
            print(f"\nüí° POSSIBLE SOLUTIONS:")
            print(f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
            print(f"2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω")
            print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        
        return len(working_channels) > 0
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    test_telemetr_api()
